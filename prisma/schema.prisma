generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Preferences {
  id        String @id @default(uuid())
  userId    String @unique
  position  String
  signature String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipment {
  id             String @id @default(uuid())
  userId         String
  type           String
  make           String
  model          String
  serialNumber   String
  testDate       String
  certificateUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
}

model Qualification {
  id                  String @id @default(uuid())
  userId              String
  awardingBody        String
  qualification       String
  qualificationNumber String
  awardDate           String
  certificateUrl      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id         String  @id @default(uuid())
  userId     String
  permission String
  clientId   String?

  client Client? @relation(fields: [clientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, permission, clientId])
}

model Address {
  id            String    @id @default(uuid())
  streetAddress String
  city          String
  county        String?
  postTown      String
  postcode      String
  country       String    @default("United Kingdom")
  client        Client?
  property      Property?
  settings      Settings?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Settings {
  id                  String  @id @default(uuid())
  name                String
  email               String
  phone               String
  logoUrl             String
  governingBody       String
  governingBodyNumber String
  addressId           String  @unique
  address             Address @relation(fields: [addressId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id          String       @id @default(uuid())
  name        String
  email       String
  phone       String
  logoUrl     String
  addressId   String       @unique
  address     Address      @relation(fields: [addressId], references: [id], onDelete: Cascade)
  permissions Permission[]
  properties  Property[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id           String        @id @default(uuid())
  uprn         String
  occupier     String
  addressId    String        @unique
  clientId     String
  address      Address       @relation(fields: [addressId], references: [id], onDelete: Cascade)
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  certificates Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}

model Certificate {
  id         String   @id @default(uuid())
  name       String
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([propertyId])
}
