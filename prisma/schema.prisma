generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Address {
  city          String
  client        Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId      String?   @unique
  county        String?
  country       String    @default("United Kingdom")
  createdAt     DateTime  @default(now())
  id            String    @id @default(cuid())
  postTown      String
  postcode      String
  property      Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId    String?   @unique
  settings      Settings? @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  settingsId    String?   @unique
  streetAddress String
  updatedAt     DateTime  @updatedAt
}

model Certificate {
  certificateType                       CertificateType
  date                                  String
  domesticVentilationCommissioningSheet DomesticVentilationCommissioningSheet?
  electricalInstallationCertificate     ElectricalInstallationCertificate?
  electricalInstallationConditionReport ElectricalInstallationConditionReport?
  fireSafetyDesignSummary               FireSafetyDesignSummary?
  id                                    String                                 @id @default(cuid())
  minorWorks                            MinorWorks?
  property                              Property                               @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId                            String
  status                                String
  supervisorId                          String?
  supervisorSignature                   String?
  supervisorSignatureDate               String?
  technicianId                          String
  technicianSignature                   String?
  technicianSignatureDate               String?

  @@index([propertyId])
}

enum CertificateType {
  MINOR_WORKS
  ELECTRICAL_INSTALLATION_CERTIFICATE
  ELECTRICAL_INSTALLATION_CONDITION_REPORT
  FIRE_SAFETY_DESIGN_SUMMARY
  DOMESTIC_VENTILATION_COMMISSIONING_SHEET
}

model Client {
  address     Address?
  createdAt   DateTime     @default(now())
  email       String
  id          String       @id @default(cuid())
  logoUrl     String
  name        String
  permissions Permission[]
  phone       String
  properties  Property[]
  updatedAt   DateTime     @updatedAt
}

model DomesticVentilationCommissioningSheet {
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  certificateId String      @unique
  id            String      @id @default(cuid())
}

model ElectricalInstallationCertificate {
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  certificateId String      @unique
  id            String      @id @default(cuid())
}

model ElectricalInstallationConditionReport {
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  certificateId String      @unique
  id            String      @id @default(cuid())
}

model Equipment {
  certificateUrl String
  createdAt      DateTime @default(now())
  id             String   @id @default(cuid())
  make           String
  model          String
  serialNumber   String
  testDate       String
  type           String
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])
  userId         String

  @@unique([userId, type])
}

model FireSafetyDesignSummary {
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  certificateId String      @unique
  id            String      @id @default(cuid())
}

model MinorWorks {
  certificate   Certificate @relation(fields: [certificateId], references: [id])
  certificateId String      @unique
  id            String      @id @default(cuid())
}

model Permission {
  client     Client?  @relation(fields: [clientId], references: [id])
  clientId   String?
  createdAt  DateTime @default(now())
  id         String   @id @default(cuid())
  permission String
  updatedAt  DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id])
  userId     String

  @@unique([userId, permission, clientId])
}

model Preferences {
  createdAt DateTime @default(now())
  id        String   @id @default(cuid())
  position  String
  signature String
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
}

model Property {
  address      Address?
  certificates Certificate[]
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId     String
  createdAt    DateTime      @default(now())
  id           String        @id @default(cuid())
  occupier     String
  updatedAt    DateTime      @updatedAt
  uprn         String

  @@index([clientId])
}

model Qualification {
  awardDate           String
  awardingBody        String
  certificateUrl      String
  createdAt           DateTime @default(now())
  id                  String   @id @default(cuid())
  qualification       String
  qualificationNumber String
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id])
  userId              String
}

model Settings {
  address             Address?
  createdAt           DateTime @default(now())
  email               String
  governingBody       String
  governingBodyNumber String
  id                  String   @id @default(cuid())
  logoUrl             String
  name                String
  phone               String
  updatedAt           DateTime @updatedAt
}

model User {
  auth0Id        String          @unique
  email          String
  equipment      Equipment[]
  id             String          @id @default(cuid())
  name           String
  permissions    Permission[]
  picture        String
  preferences    Preferences?
  qualifications Qualification[]
}
