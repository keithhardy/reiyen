generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Preferences {
  id        String @id @default(cuid())
  userId    String @unique
  position  String
  signature String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipment {
  id             String @id @default(cuid())
  userId         String
  type           String
  make           String
  model          String
  serialNumber   String
  testDate       String
  certificateUrl String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, type])
}

model Qualification {
  id                  String @id @default(cuid())
  userId              String
  awardingBody        String
  qualification       String
  qualificationNumber String
  awardDate           String
  certificateUrl      String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Permission {
  id         String  @id @default(cuid())
  userId     String
  permission String
  clientId   String?

  client Client? @relation(fields: [clientId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, permission, clientId])
}

model Address {
  id            String  @id @default(cuid())
  streetAddress String
  city          String
  county        String?
  postTown      String
  postcode      String
  country       String  @default("United Kingdom")

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  settingsId String?   @unique
  Settings   Settings? @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  clientId   String?   @unique
  Client     Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  propertyId String?   @unique
  Property   Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
}

model Settings {
  id                  String   @id @default(cuid())
  name                String
  email               String
  phone               String
  logoUrl             String
  governingBody       String
  governingBodyNumber String
  address             Address?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id          String       @id @default(cuid())
  name        String
  email       String
  phone       String
  logoUrl     String
  address     Address?
  permissions Permission[]
  properties  Property[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Property {
  id           String        @id @default(cuid())
  uprn         String
  occupier     String
  clientId     String
  address      Address?
  client       Client        @relation(fields: [clientId], references: [id], onDelete: Cascade)
  certificates Certificate[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}

enum CertificateType {
  ELECTRICAL_INSTALLATION_CONDITION_REPORT
  ELECTRICAL_INSTALLATION_CERTIFICATE
  MINOR_WORKS
  FIRE_SAFETY_DESIGN_SUMMARY
  DOMESTIC_VENTILATION_COMMISSIONING_SHEET
}

model Certificate {
  id         String   @id @default(cuid())
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  type CertificateType

  electricalInstallationConditionReport ElectricalInstallationConditionReport?
  electricalInstallationCertificate     ElectricalInstallationCertificate?
  minorWorks                            MinorWorks?
  fireSafetyDesignSummary               FireSafetyDesignSummary?
  domesticVentilationCommissioningSheet DomesticVentilationCommissioningSheet?

  @@index([propertyId])
}

model ElectricalInstallationConditionReport {
  id String @id @default(cuid())

  certificateId String      @unique
  certificate   Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)

  @@index([certificateId])
}

model ElectricalInstallationCertificate {
  id String @id @default(cuid())

  certificateId String      @unique
  certificate   Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
}

model MinorWorks {
  id String @id @default(cuid())

  certificateId String      @unique
  certificate   Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
}

model FireSafetyDesignSummary {
  id String @id @default(cuid())

  certificateId String      @unique
  certificate   Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
}

model DomesticVentilationCommissioningSheet {
  id String @id @default(cuid())

  certificateId String      @unique
  certificate   Certificate @relation(fields: [certificateId], references: [id], onDelete: Cascade)
}
