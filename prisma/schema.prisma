generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Settings {
  id                  String   @id @default(cuid())
  address             Address?
  email               String
  governingBody       String
  governingBodyNumber String
  logoUrl             String
  name                String
  phone               String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Address {
  id            String    @id @default(cuid())
  city          String
  clientId      String?   @unique
  country       String    @default("United Kingdom")
  county        String?
  postTown      String
  postcode      String
  propertyId    String?   @unique
  settingsId    String?   @unique
  streetAddress String
  client        Client?   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  property      Property? @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  settings      Settings? @relation(fields: [settingsId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Preferences {
  id        String   @id @default(cuid())
  position  String
  signature String
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Equipment {
  id             String   @id @default(cuid())
  certificateUrl String
  make           String
  model          String
  serialNumber   String
  testDate       String
  type           String
  userId         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@unique([userId, type])
}

model Qualification {
  id                  String   @id @default(cuid())
  awardingBody        String
  awardDate           String
  certificateUrl      String
  qualification       String
  qualificationNumber String
  userId              String
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Permission {
  id         String   @id @default(cuid())
  clientId   String?
  permission String
  userId     String
  client     Client?  @relation(fields: [clientId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([userId, permission, clientId])
}

model Client {
  id          String       @id @default(cuid())
  address     Address?
  email       String
  logoUrl     String
  name        String
  permissions Permission[]
  phone       String
  properties  Property[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
}

model Property {
  id        String   @id @default(cuid())
  address   Address?
  clientId  String
  occupier  String
  uprn      String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([clientId])
}
